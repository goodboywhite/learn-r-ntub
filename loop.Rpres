迴圈
========================================================
author: 郭耀仁
date: `r Sys.Date()`
autosize: true

迴圈
========================================================

- 善用迴圈能夠寫出簡短的程式碼
- R 語言可以使用常見的兩種迴圈
    - for 迴圈
    - while 迴圈

內建向量 month.name
========================================================

- 想要把它所有的內容一一輸出在命令列

```{r results='hide'}
month.name[1]
month.name[2]
month.name[3]
month.name[4]
month.name[5]
month.name[6]
month.name[7]
month.name[8]
month.name[9]
month.name[10]
month.name[11]
month.name[12]
```

內建向量 month.name（2）
========================================================

- 今天運氣好，`month.name` 只有 12 個元素
- 萬一裡面的元素很多怎麼辦？
- 用迴圈吧！

```{r results='hide'}
# for 迴圈
for (month in month.name) {
  print(month)
}
```

內建向量 month.name（3）
========================================================

- 或者用索引值

```{r results='hide'}
# for 迴圈
for (i in 1:12) {
  print(month.name[i])
}
```

迴圈的元素
========================================================

- 宣告迴圈種類（`for`）
- 宣告迭代子名稱（`month` 或 `i`）
- 指定迭代空間（`month.name` 或 `1:12`）
- 每一次迭代要執行的程式（`print(month)` 或 `print(month.name[i])`）

迴圈的應用場景
========================================================

- `sum()` 函數
- `length()` 函數

while 迴圈
========================================================

- `while` 迴圈會先檢查條件才執行程式碼

```{r results = 'hide'}
i <- 1
while (i <= length(month.name)) {
  print(month.name[i])
  i <- i + 1
}
```

for 或者 while 的使用時機
========================================================

- 所有的 `for` 都可以用 `while` 改寫
- 但是反過來並非如此
- 不知道迭代次數的時候用 `while`

for 或者 while 的使用時機（2）
========================================================

- 投擲一個公正的銅板，必須出現三次正面才可以停止
- 請問總共要投幾次？

```{r results = 'hide'}
coin_flips <- c()
coin <- c(TRUE, FALSE) # TRUE 代表正面，FALSE 代表反面
i <- 1

while (sum(coin_flips) < 3){
  coin_flips[i] <- sample(coin, size = 1)
  i <- i + 1
}
coin_flips # 投擲紀錄
length(coin_flips) # 總共投了幾次
```

隨堂練習
========================================================

- 將 1 到 100 印出，但是：
    - 碰到 3 的倍數輸出 "三的倍數"
    - 碰到 5 的倍數輸出 "五的倍數"
    - 碰到 3 與 5 的公倍數時輸出 "十五的倍數"

隨堂練習
========================================================

- 將 87 因數分解，輸出所有的正因數

隨堂練習
========================================================

- 輸出以 0, 1 起始的前 20 個 [Fibonacci 數列](https://en.wikipedia.org/wiki/Fibonacci_number)

巢狀迴圈
========================================================

- 巢狀迴圈（nested loop）是指迴圈包含另一個迴圈

```{r}
outer_vector = c(1, 2, 3)
inner_vector = c(4, 5, 6)
for (outer_i in outer_vector) {
  for (inner_i in inner_vector) {
    print(outer_i * inner_i)
  }
}
```

隨堂練習
========================================================

- 建立一副撲克牌